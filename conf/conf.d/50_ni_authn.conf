#
# Enable the login forms and authn system.
#

# Defaults to use on platforms without a defines conf.
<IfDefine !HTDOCS_PATH>
    Define HTDOCS_PATH /usr/share/apache2/htdocs
</IfDefine>
<IfDefine !HTCONF_PATH>
    Define HTCONF_PATH /etc/apache2
</IfDefine>
<IfDefine !OPENSSL_PATH>
    Define OPENSSL_PATH openssl
</IfDefine>
<IfDefine !MODULES_PATH>
    Define MODULES_PATH lib/apache2/modules
</IfDefine>
<IfDefine !AUTHN_CACHE_PROVIDER>
    Define AUTHN_CACHE_PROVIDER shmcb
</IfDefine>
<IfDefine !AUTHN_FILE_ENABLED>
    <IfDefine !AUTHN_LDAP_ENABLED>
        <IfDefine !AUTHN_WINDOWS_ENABLED>
            # Default to the file provider if none are enabled.
            Define AUTHN_FILE_ENABLED
        </IfDefine>
    </IfDefine>
</IfDefine>

# Determine which providers to use. The order is significant.
Define AUTHN_PROVIDER " "
<IfDefine AUTHN_FILE_ENABLED>
    Define AUTHN_PROVIDER "${AUTHN_PROVIDER} file"
    LoadModule authn_file_module ${MODULES_PATH}/mod_authn_file.so
</IfDefine>
<IfDefine AUTHN_WINDOWS_ENABLED>
    Define AUTHN_PROVIDER "${AUTHN_PROVIDER} windows"
    LoadModule authn_niwindows_module ${MODULES_PATH}/mod_authn_niwindows.so

    # Set up authentication caching by loading the modules and inserting the
    # socache authn provider to run first.
    <IfDefine AUTHN_CACHE_WINDOWS>
        LoadModule authn_socache_module modules/mod_authn_socache.so
        LoadModule socache_${AUTHN_CACHE_PROVIDER}_module modules/mod_socache_${AUTHN_CACHE_PROVIDER}.so
        Define AUTHN_CACHE_CONTEXT windows
        Define AUTHN_PROVIDER "socache ${AUTHN_PROVIDER}"
        AuthnCacheSOCache ${AUTHN_CACHE_PROVIDER}
    </IfDefine>
</IfDefine>
<IfDefine AUTHN_LDAP_ENABLED>
    Define AUTHN_PROVIDER "${AUTHN_PROVIDER} ldap"
    LoadModule authnz_ldap_module ${MODULES_PATH}/mod_authnz_ldap.so
</IfDefine>

# Load our privilege module for authorization.
LoadModule authz_niprivilege_module ${MODULES_PATH}/mod_authz_niprivilege.so

# Set up session crypto.
SessionCryptoDriver openssl

# XXX: iconv is crashing on Linux RT when we enable AuthLDAPCharsetConfig.
<IfDefine AUTHN_LDAP_USE_CHARSET>
    <IfDefine AUTHN_LDAP_ENABLED>
        AuthLDAPCharsetConfig ${HTCONF_PATH}/charset.conv
    </IfDefine>
</IfDefine>

<Location />
    <If "%{HTTP_USER_AGENT} =~ /Mozilla/">
        # Directives that only apply to clients that claim they
        # are Mozilla compatible (i.e. browsers).
        AuthType Form

        # If the user is authenticated but authorization fails, Apache
        # will issue a 401. In that case, show the login page since
        # there isn't a WWW-Authenticate header for form auth.
        ErrorDocument 401 /login/login.shtml

        # Set up the redirection URI for Header to read if needed.
        SetEnvIf Request_URI "^(.*)$" "AUTH_REQUEST_URI=$1"

        # If authentication fails, issue a 401 instead of a 200 OK.
        Redirect 401 /login/login-redirect
    </If>
    <Else>
        # Directives that apply to clients that are not browsers.
        AuthType Basic

        # "Remove" the login location when not using form auth.
        Redirect 404 /login
    </Else>

    # Outside of the If so they can be overidden.
    AuthBasicProvider ${AUTHN_PROVIDER}
    AuthFormProvider ${AUTHN_PROVIDER}
    AuthFormLoginRequiredLocation /login/login-redirect
    # TODO: What AuthName to use? The auth session is tied to the name.
    AuthName "protected area"

    # Authentication module settings
    <IfDefine AUTHN_FILE_ENABLED>
        AuthUserFile ${HTCONF_PATH}/.htpasswd
    </IfDefine>
    <IfDefine AUTHN_WINDOWS_ENABLED>
        <IfDefine AUTHN_WINDOWS_UPN>
            AuthNIWindowsAcceptUPN On
            Define AUTHN_CACHE_CONTEXT windows-UPN
        </IfDefine>
        <IfDefine !AUTHN_WINDOWS_UPN>
            <IfDefine AUTHN_WINDOWS_DOMAIN>
                AuthNIWindowsDomain ${AUTHN_WINDOWS_DOMAIN}
                Define AUTHN_CACHE_CONTEXT "windows-domain-${AUTHN_WINDOWS_DOMAIN}"
            </IfDefine>
        </IfDefine>
        <IfDefine AUTHN_CACHE_WINDOWS>
            AuthnCacheProvideFor windows
            AuthnCacheContext ${AUTHN_CACHE_CONTEXT}
            <IfDefine AUTHN_CACHE_TIMEOUT>
                AuthnCacheTimeout ${AUTHN_CACHE_TIMEOUT}
            </IfDefine>
        </IfDefine>
    </IfDefine>
    <IfDefine AUTHN_LDAP_ENABLED>
        AuthLDAPBindDN ${AUTHN_LDAP_BIND_DN}
        AuthLDAPBindPassword ${AUTHN_LDAP_BIND_PASSWORD}
        AuthLDAPUrl ${AUTHN_LDAP_URL}
        LDAPReferrals Off
    </IfDefine>

    # Authorization module settings
    AuthNIPrivilegeDirectory ${HTCONF_PATH}/htpriv.d
    AuthNIPrivilegeRoleMappings ${HTCONF_PATH}/.htroles

    # 15 minutes. TODO: What do we want here?
    SessionMaxAge 900
    SessionDBDCookieName session path=/
    SessionCryptoPassphrase "exec:${OPENSSL_PATH} rand -base64 32"
</Location>

# Contains the static files for the form auth login page.
<Location /login>
    DirectoryIndex login.shtml

    # Get AUTH_REDIR_URI from cookie --> env, so that mod_include can insert it into the log-in page.
    # We first default to /
    # TODO: default to a login successful page?
    SetEnvIf Request_URI .* "AUTH_REDIR_URI=/"
    SetEnvIf Cookie "(^|;\s*)AUTH_REDIR_URI=(/[^;]*)($|;)" "AUTH_REDIR_URI=$2"

    # Enable server-side includes.
    AddType text/html .shtml
    AddOutputFilter INCLUDES .shtml
    Options +Includes
</Location>

# Form auth processor route that handles the posted auth form.
<Location /login/login.do>
    Session On
    SetHandler form-login-handler
    # Will redirect back to the posted `httpd_location`
</Location>

# Form auth processor route that logs out users
<Location /login/logout>
    SetHandler form-logout-handler
    # TODO: logout successful page?
    AuthFormLogoutLocation /login/
    Session On
    SessionMaxAge 1
</Location>

<Directory ${HTDOCS_PATH}/login>
    <Files current.s*>
        Session On

        # Authn is not performed unless Authz calls for it.
        Require valid-user

        # Set redirection URI --> AUTH_REDIR_URI cookie. This will be later processed by the log-in page.
        # ToDo: We probably need to uniquify the cookie per request somehow. Parallel requests will clobber each other.
        Header always add Set-Cookie "AUTH_REDIR_URI=%{AUTH_REQUEST_URI}e;path=/;" "expr=-z %{REMOTE_USER}"
    </Files>
</Directory>
